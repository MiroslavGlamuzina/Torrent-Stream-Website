{
  "name": "qap",
  "version": "3.1.3",
  "description": "Qap, a quick parser/matcher optimized for string and buffer patterns (<= 255 bytes).",
  "homepage": "https://github.com/rootslab/qap",
  "repository": {
    "type": "git",
    "url": "git://github.com/rootslab/qap.git"
  },
  "keywords": [
    "parser",
    "fast",
    "qap",
    "parse",
    "quick search",
    "pattern matching",
    "pattern",
    "string",
    "search"
  ],
  "author": {
    "name": "Guglielmo Ferri",
    "email": "44gatti@gmail.com"
  },
  "dependencies": {},
  "main": "index",
  "engines": {
    "node": ">=0.4.x"
  },
  "scripts": {
    "test": "bash test/run.sh",
    "bench": "bash bench/run.sh"
  },
  "license": "MIT",
  "readmeFilename": "Readme.md",
  "readme": "### Qap\n\n[![NPM VERSION](http://img.shields.io/npm/v/qap.svg?style=flat)](https://www.npmjs.org/package/qap)\n[![CODACY BADGE](https://img.shields.io/codacy/b18ed7d95b0a4707a0ff7b88b30d3def.svg?style=flat)](https://www.codacy.com/public/44gatti/qap)\n[![CODECLIMATE](http://img.shields.io/codeclimate/github/rootslab/qap.svg?style=flat)](https://codeclimate.com/github/rootslab/qap)\n[![CODECLIMATE-TEST-COVERAGE](https://img.shields.io/codeclimate/coverage/github/rootslab/qap.svg?style=flat)](https://codeclimate.com/github/rootslab/qap)\n[![LICENSE](http://img.shields.io/badge/license-MIT-blue.svg?style=flat)](https://github.com/rootslab/qap#mit-license)\n\n[![TRAVIS CI BUILD](http://img.shields.io/travis/rootslab/qap.svg?style=flat)](http://travis-ci.org/rootslab/qap)\n[![BUILD STATUS](http://img.shields.io/david/rootslab/qap.svg?style=flat)](https://david-dm.org/rootslab/qap)\n[![DEVDEPENDENCY STATUS](http://img.shields.io/david/dev/rootslab/qap.svg?style=flat)](https://david-dm.org/rootslab/qap#info=devDependencies)\n[![NPM DOWNLOADS](http://img.shields.io/npm/dm/qap.svg?style=flat)](http://npm-stat.com/charts.html?package=qap)\n\n[![NPM GRAPH1](https://nodei.co/npm-dl/qap.png)](https://nodei.co/npm/qap/)\n\n[![NPM GRAPH2](https://nodei.co/npm/qap.png?downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/qap/)\n\n[![status](https://sourcegraph.com/api/repos/github.com/rootslab/qap/.badges/status.png)](https://sourcegraph.com/github.com/rootslab/qap)\n[![views](https://sourcegraph.com/api/repos/github.com/rootslab/qap/.counters/views.png)](https://sourcegraph.com/github.com/rootslab/qap)\n[![views 24h](https://sourcegraph.com/api/repos/github.com/rootslab/qap/.counters/views-24h.png)](https://sourcegraph.com/github.com/rootslab/qap)\n\n * __Qap__ is a quick parser for string or buffer patterns. \n * It is optimized for using with pattern strings <= 255 bytes.\n * Better results are achieved with long and sparse patterns.\n * It is an implementation of QuickSearch algorithm.\n\n###Main features\n\n> Given a m-length pattern and n-length data and σ-length alphabet ( σ = 256 ):\n\n - simplification of the Boyer-Moore algorithm ( *see [Bop](https://github.com/rootslab/bop)* ).\n - uses only a bad-character shift table.\n - preprocessing phase in __O(m+σ)__ time and __O(σ)__ space complexity.\n - searching phase in __O(m*n)__ time complexity.\n - very fast in practice for short patterns and large alphabets.\n\n> See __[Lecroq](http://www-igm.univ-mlv.fr/~lecroq/string/node19.html)__ for reference and also __[Bop](https://github.com/rootslab/bop)__, a Boyer-Moore parser.\n\n###Install\n```bash\n$ npm install qap [-g]\n```\n\n> __require__:\n\n```javascript\nvar Qap = require( 'qap' );\n```\n\n###Run Tests\n\n```javascript\n$cd qap/\n$npm test\n```\n\n###Run Benchmarks\n\n```bash\n$ cd qap/\n$ npm run-script bench\n```\n\n###Constructor\n\n> Create an instance with a Buffer or String pattern.\n\n```javascript\nQap( Buffer || String pattern )\n// or\nneq Qap( Buffer || String pattern )\n```\n\n###Methods\n\n> List all pattern occurrences into a String or Buffer data.\n> It returns a new array of indexes, or populates an array passed as the last argument to parse method.\n\n```javascript\n// slower with String\nQap#parse( String data [, Number startFromIndex [, Number limitResultsTo [, Array array ] ] ] ) : Array\n\n// faster with Buffer\nQap#parse( Buffer data [, Number startFromIndex [, Number limitResultsTo [, Array array ] ] ] ) : Array\n```\n\n> Change the pattern :\n\n```javascript\nQap#set( Buffer || String pattern ) : Buffer\n```\n\n###Usage Example\n\n```javascript\nvar log = console.log\n    , assert = require( 'assert' )\n    , Qap = require( 'qap' )\n    , pattern = 'hellofolks\\r\\n\\r\\n'\n    , text = 'hehe' + pattern +'loremipsumhellofolks\\r\\n' + pattern\n    , bresult = null\n    ;\n\n// create an instance and parse the pattern\nvar qap = Qap( pattern )\n    // parse data from beginning\n    , results = qap.parse( text )\n    ;\n\n// set a new Buffer pattern\nqap.set( new Buffer( pattern ) );\n\n// parse data uffer instead of a String\nbresults = qap.parse( new Buffer( text ) );\n\n// parser results ( starting indexes ) [ 4, 40 ]\nlog( results, bresults );\n\n// results are the same\nassert.deepEqual( results, bresults );\n\n```\n\n####Benchmark for a small pattern ( length <= 255 bytes )\n\n> Parser uses a Buffer 256-bytes long to build the shifting table, then:\n\n> - Pattern parsing / table creation space and time complexity is O(σ).\n> - Very low memory footprint.\n> - Ultra fast to preprocess pattern ( = table creation ).\n\n```bash\n  $ node bench/small-pattern-data-rate\n```\n\nfor default it:\n\n> - uses a pattern string of 57 bytes/chars\n> - builds a data buffer of 700 MB in memory\n> - uses a redundancy/distance factor for pattern strings equal to 2. The bigger the value, \nthe lesser are occurrences of pattern string into the text buffer.\n\n **Custom Usage**:\n\n```bash\n  # with [testBufferSizeInMB] [distanceFactor] [aStringPattern]\n  $ node bench/small-pattern-data-rate.js 700 4 \"that'sallfolks\"\n```\n\n####Benchmark for a big pattern ( length > 255 bytes )\n\n> Parser uses one Array to build the shifting table for a big pattern, then:\n\n> - table has a size of 256 elements, every element is an integer value that\n> could be between 0 and the pattern length.\n> - Fast to preprocess pattern ( = table creation ).\n> - Low memory footprint\n\n```bash\n  $ node bench/big-pattern-data-rate\n```\n\n> - it uses a pattern size of 20MB\n> - builds a data buffer of 300MB copying pattern 12 times\n\nSee __[bench](./bench)__ dir.\n\n### MIT License\n\n> Copyright (c) 2015 &lt; Guglielmo Ferri : 44gatti@gmail.com &gt;\n\n> Permission is hereby granted, free of charge, to any person obtaining\n> a copy of this software and associated documentation files (the\n> 'Software'), to deal in the Software without restriction, including\n> without limitation the rights to use, copy, modify, merge, publish,\n> distribute, sublicense, and/or sell copies of the Software, and to\n> permit persons to whom the Software is furnished to do so, subject to\n> the following conditions:\n\n> __The above copyright notice and this permission notice shall be\n> included in all copies or substantial portions of the Software.__\n\n> THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\n> EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n> MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n> IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n> CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n> TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n> SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "bugs": {
    "url": "https://github.com/rootslab/qap/issues"
  },
  "_id": "qap@3.1.3",
  "_from": "qap@^3.1.2"
}
