{
  "name": "simple-peer",
  "description": "Simple one-to-one WebRTC video/voice and data channels",
  "version": "6.0.1",
  "author": {
    "name": "Feross Aboukhadijeh",
    "email": "feross@feross.org",
    "url": "http://feross.org/"
  },
  "bugs": {
    "url": "https://github.com/feross/simple-peer/issues"
  },
  "dependencies": {
    "debug": "^2.1.0",
    "get-browser-rtc": "^1.0.0",
    "hat": "0.0.3",
    "inherits": "^2.0.1",
    "once": "^1.3.1"
  },
  "devDependencies": {
    "browserify": "^13.0.0",
    "concat-stream": "^1.4.6",
    "simple-get": "^2.0.0",
    "standard": "^6.0.5",
    "string-to-stream": "^1.0.0",
    "tape": "^4.0.0",
    "thunky": "^0.1.0",
    "uglify-js": "^2.4.15",
    "zuul": "^3.8.0"
  },
  "keywords": [
    "webrtc",
    "p2p",
    "data channel",
    "data channels",
    "data",
    "video",
    "voice",
    "peer",
    "stream",
    "peer-to-peer",
    "data channel stream",
    "webrtc stream",
    "peer"
  ],
  "license": "MIT",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/feross/simple-peer.git"
  },
  "scripts": {
    "test": "standard && npm run test-browser",
    "test-browser": "zuul -- test/*.js",
    "test-browser-local": "zuul --local -- test/*.js",
    "test-node": "echo 'DISABLED' && tape test/*.js",
    "build": "browserify -s SimplePeer -r ./ | uglifyjs -m > simplepeer.min.js"
  },
  "testling": {
    "files": "test/*.js"
  },
  "readme": "# simple-peer [![travis](https://img.shields.io/travis/feross/simple-peer/master.svg)](https://travis-ci.org/feross/simple-peer) [![npm](https://img.shields.io/npm/v/simple-peer.svg)](https://npmjs.org/package/simple-peer) [![npm downloads](https://img.shields.io/npm/dm/simple-peer.svg)](https://npmjs.org/package/simple-peer)\n\n#### Simple WebRTC video/voice and data channels.\n\n[![js-standard-style](https://cdn.rawgit.com/feross/standard/master/badge.svg)](https://github.com/feross/standard) [![Sauce Test Status](https://saucelabs.com/browser-matrix/feross-simple-peer.svg)](https://saucelabs.com/u/feross-simple-peer)\n\n## features\n\n- concise, **node.js style** API for [WebRTC](https://en.wikipedia.org/wiki/WebRTC)\n- **works in node and the browser!**\n- supports **video/voice streams**\n- supports **data channel**\n  - text and binary data\n  - node.js [duplex stream](http://nodejs.org/api/stream.html) interface\n- supports advanced options like:\n  - enable/disable [trickle ICE candidates](http://webrtchacks.com/trickle-ice/)\n  - manually set config and constraints options\n\nThis module works in the browser with [browserify](http://browserify.org/).\n\n**Note:** If you're **NOT** using browserify, then use the included standalone file\n`simplepeer.min.js`. This exports a `SimplePeer` constructor on `window`.\n\n## install\n\n```\nnpm install simple-peer\n```\n\n## usage\n\nLet's create an html page that let's you manually connect two peers:\n\n```html\n<html>\n  <body>\n    <style>\n      #outgoing {\n        width: 600px;\n        word-wrap: break-word;\n      }\n    </style>\n    <form>\n      <textarea id=\"incoming\"></textarea>\n      <button type=\"submit\">submit</button>\n    </form>\n    <pre id=\"outgoing\"></pre>\n    <script src=\"bundle.js\"></script>\n  </body>\n</html>\n```\n\n```js\nvar Peer = require('simple-peer')\nvar p = new Peer({ initiator: location.hash === '#1', trickle: false })\n\np.on('error', function (err) { console.log('error', err) })\n\np.on('signal', function (data) {\n  console.log('SIGNAL', JSON.stringify(data))\n  document.querySelector('#outgoing').textContent = JSON.stringify(data)\n})\n\ndocument.querySelector('form').addEventListener('submit', function (ev) {\n  ev.preventDefault()\n  p.signal(JSON.parse(document.querySelector('#incoming').value))\n})\n\np.on('connect', function () {\n  console.log('CONNECT')\n  p.send('whatever' + Math.random())\n})\n\np.on('data', function (data) {\n  console.log('data: ' + data)\n})\n```\n\nVisit `index.html#1` from one browser (the initiator) and `index.html` from another\nbrowser (the receiver).\n\nAn \"offer\" will be generated by the initiator. Paste this into the receiver's form and\nhit submit. The receiver generates an \"answer\". Paste this into the initiator's form and\nhit submit.\n\nNow you have a direct P2P connection between two browsers!\n\n### A simpler example\n\nThis example create two peers **in the web same page**.\n\nIn a real-world application, *you would never do this*. The sender and receiver `Peer`\ninstances would exist in separate browsers. A \"signaling server\" (usually implemented with\nwebsockets) would be used to exchange signaling data between the two browsers until a\npeer-to-peer connection is established.\n\n### data channels\n\n```js\nvar SimplePeer = require('simple-peer')\n\nvar peer1 = new SimplePeer({ initiator: true })\nvar peer2 = new SimplePeer()\n\npeer1.on('signal', function (data) {\n  // when peer1 has signaling data, give it to peer2 somehow\n  peer2.signal(data)\n})\n\npeer2.on('signal', function (data) {\n  // when peer2 has signaling data, give it to peer1 somehow\n  peer1.signal(data)\n})\n\npeer1.on('connect', function () {\n  // wait for 'connect' event before using the data channel\n  peer1.send('hey peer2, how is it going?')\n})\n\npeer2.on('data', function (data) {\n  // got a data channel message\n  console.log('got a message from peer1: ' + data)\n})\n```\n\n### video/voice\n\nVideo/voice is also super simple! In this example, peer1 sends video to peer2.\n\n```js\nvar SimplePeer = require('simple-peer')\n\n// get video/voice stream\nnavigator.getUserMedia({ video: true, audio: true }, gotMedia, function () {})\n\nfunction gotMedia (stream) {\n  var peer1 = new SimplePeer({ initiator: true, stream: stream })\n  var peer2 = new SimplePeer()\n\n  peer1.on('signal', function (data) {\n    peer2.signal(data)\n  })\n\n  peer2.on('signal', function (data) {\n    peer1.signal(data)\n  })\n\n  peer2.on('stream', function (stream) {\n    // got remote video stream, now let's show it in a video tag\n    var video = document.querySelector('video')\n    video.src = window.URL.createObjectURL(stream)\n    video.play()\n  })\n}\n```\n\nFor two-way video, simply pass a `stream` option into both `Peer` constructors. Simple!\n\n### in node\n\nTo use this library in node, pass in `opts.wrtc` as a parameter:\n\n```js\nvar SimplePeer = require('simple-peer')\nvar wrtc = require('wrtc')\n\nvar peer1 = new SimplePeer({ initiator: true, wrtc: wrtc })\nvar peer2 = new SimplePeer({ wrtc: wrtc })\n```\n\n## Who is using `simple-peer`?\n\n- [Friends](https://github.com/moose-team/friends) - Peer-to-peer chat powered by the web\n- [ScreenCat](https://maxogden.github.io/screencat/) - Screen sharing + remote collaboration app\n- [Socket.io-p2p](https://github.com/socketio/socket.io-p2p) - Official Socket.io P2P communication library\n- [WebTorrent](http://webtorrent.io) - Streaming torrent client in the browser\n- [Instant.io](https://instant.io) - Secure, anonymous, streaming file transfer\n- [WebCat](https://www.npmjs.com/package/webcat) - P2P pipe across the web using Github private/public key for auth\n- [RTCCat](https://www.npmjs.com/package/rtcat) - WebRTC netcat\n- [PeerNet](https://www.npmjs.com/package/peernet) - Peer-to-peer gossip network using randomized algorithms\n- [PusherTC](http://pushertc.herokuapp.com) - Video chat with using Pusher. See [guide](http://blog.carbonfive.com/2014/10/16/webrtc-made-simple/).\n- [lxjs-chat](https://github.com/feross/lxjs-chat) - Omegle-like video chat site\n- [Whiteboard](https://github.com/feross/whiteboard) - P2P Whiteboard powered by WebRTC and WebTorrent\n- *Your app here! - send a PR!*\n\n## api\n\n### `peer = new SimplePeer([opts])`\n\nCreate a new WebRTC peer connection.\n\nA \"data channel\" for text/binary communication is always established, because it's cheap and often useful. For video/voice communication, pass the `stream` option.\n\nIf `opts` is specified, then the default options (shown below) will be overridden.\n\n```\n{\n  initiator: false,\n  channelConfig: {},\n  channelName: '<random string>',\n  config: { iceServers: [ { url: 'stun:23.21.150.121' } ] },\n  constraints: {},\n  reconnectTimer: false,\n  sdpTransform: function (sdp) { return sdp },\n  stream: false,\n  trickle: true,\n  wrtc: {} // RTCPeerConnection/RTCSessionDescription/RTCIceCandidate\n}\n```\n\nThe options do the following:\n\n- `initiator` - set to true if this is the initiating peer\n- `channelConfig` - custom webrtc data channel configuration (used by `createDataChannel`)\n- `channelName` - custom webrtc data channel name\n- `config` - custom webrtc configuration (used by `RTCPeerConnection` constructor)\n- `constraints` - custom webrtc video/voice constaints (used by `RTCPeerConnection` constructor)\n- `reconnectTimer` - wait __ milliseconds after ICE 'disconnect' for reconnect attempt before emitting 'close'\n- `sdpTransform` - function to transform the generated SDP signaling data (for advanced users)\n- `stream` - if video/voice is desired, pass stream returned from `getUserMedia`\n- `trickle` - set to `false` to disable [trickle ICE](http://webrtchacks.com/trickle-ice/) and get a single 'signal' event (slower)\n- `wrtc` - custom webrtc implementation, mainly useful in node to specify in the [wrtc](https://npmjs.com/package/wrtc) package\n\n### `peer.signal(data)`\n\nCall this method whenever the remote peer emits a `peer.on('signal')` event.\n\nThe `data` will encapsulate a webrtc offer, answer, or ice candidate. These messages help\nthe peers to eventually establish a direct connection to each other. The contents of these\nstrings are an implementation detail that can be ignored by the user of this module;\nsimply pass the data from 'signal' events to the remote peer and call `peer.signal(data)`\nto get connected.\n\n### `peer.send(data)`\n\nSend text/binary data to the remote peer. `data` can be any of several types: `String`,\n`Buffer` (see [buffer](https://github.com/feross/buffer)), `TypedArrayView` (`Uint8Array`,\netc.), `ArrayBuffer`, or `Blob` (in browsers that support it).\n\nNote: If this method is called before the `peer.on('connect')` event has fired, then data\nwill be buffered.\n\n### `peer.destroy([onclose])`\n\nDestroy and cleanup this peer connection.\n\nIf the optional `onclose` parameter is passed, then it will be registered as a listener on the 'close' event.\n\n### `Peer.WEBRTC_SUPPORT`\n\nDetect native WebRTC support in the javascript environment.\n\n```js\nvar Peer = require('simple-peer')\n\nif (Peer.WEBRTC_SUPPORT) {\n  // webrtc support!\n} else {\n  // fallback\n}\n```\n\n### duplex stream\n\n`Peer` objects are instances of `stream.Duplex`. The behave very similarly to a\n`net.Socket` from the node core `net` module. The duplex stream reads/writes to the data\nchannel.\n\n```js\nvar peer = new Peer(opts)\n// ... signaling ...\npeer.write(new Buffer('hey'))\npeer.on('data', function (chunk) {\n  console.log('got a chunk', chunk)\n})\n```\n\n## events\n\n\n### `peer.on('signal', function (data) {})`\n\nFired when the peer wants to send signaling data to the remote peer.\n\n**It is the responsibility of the application developer (that's you!) to get this data to\nthe other peer.** This usually entails using a websocket signaling server. This data is an\n`Object`, so  remember to call `JSON.stringify(data)` to serialize it first. Then, simply\ncall `peer.signal(data)` on the remote peer.\n\n### `peer.on('connect', function () {})`\n\nFired when the peer connection and data channel are ready to use.\n\n### `peer.on('data', function (data) {})`\n\nReceived a message from the remote peer (via the data channel). JSON strings will be\nparsed and the resulting `Object` emitted.\n\n`data` will be either a `String` or a `Buffer/Uint8Array` (see [buffer](https://github.com/feross/buffer)).\n\n### `peer.on('stream', function (stream) {})`\n\nReceived a remote video stream, which can be displayed in a video tag:\n\n```js\npeer.on('stream', function (stream) {\n  var video = document.createElement('video')\n  video.src = window.URL.createObjectURL(stream)\n  document.body.appendChild(video)\n  video.play()\n})\n```\n\n### `peer.on('close', function () {})`\n\nCalled when the peer connection has closed.\n\n### `peer.on('error', function (err) {})`\n\nFired when a fatal error occurs. Usually, this means bad signaling data was received from the remote peer.\n\n`err` is an `Error` object.\n\n## connecting more than 2 peers?\n\nThe simplest way to do that is to create a full-mesh topology. That means that every peer\nopens a connection to every other peer. To illustrate:\n\n![full mesh topology](img/full-mesh.png)\n\nTo broadcast a message, just iterate over all the peers and call `peer.send`.\n\nSo, say you have 3 peers. Then, when a peer wants to send some data it must send it 2\ntimes, once to each of the other peers. So you're going to want to be a bit careful about\nthe size of the data you send.\n\nFull mesh topologies don't scale well when the number of peers is very large. The total\nnumber of edges in the network will be ![full mesh formula](img/full-mesh-formula.png)\nwhere `n` is the number of peers.\n\nFor clarity, here is the code to connect 3 peers together:\n\n#### Peer 1\n\n```js\n// These are peer1's connections to peer2 and peer3\nvar peer2 = new SimplePeer({ initiator: true })\nvar peer3 = new SimplePeer({ initiator: true })\n\npeer2.on('signal', function (data) {\n  // send this signaling data to peer2 somehow\n})\n\npeer2.on('connect', function () {\n  peer2.send('hi peer2, this is peer1')\n})\n\npeer2.on('data', function (data) {\n  console.log('got a message from peer2: ' + data)\n})\n\npeer3.on('signal', function (data) {\n  // send this signaling data to peer3 somehow\n})\n\npeer3.on('connect', function () {\n  peer3.send('hi peer3, this is peer1')\n})\n\npeer3.on('data', function (data) {\n  console.log('got a message from peer3: ' + data)\n})\n```\n\n#### Peer 2\n\n```js\n// These are peer2's connections to peer1 and peer3\nvar peer1 = new SimplePeer()\nvar peer3 = new SimplePeer({ initiator: true })\n\npeer1.on('signal', function (data) {\n  // send this signaling data to peer1 somehow\n})\n\npeer1.on('connect', function () {\n  peer1.send('hi peer1, this is peer2')\n})\n\npeer1.on('data', function (data) {\n  console.log('got a message from peer1: ' + data)\n})\n\npeer3.on('signal', function (data) {\n  // send this signaling data to peer3 somehow\n})\n\npeer3.on('connect', function () {\n  peer3.send('hi peer3, this is peer2')\n})\n\npeer3.on('data', function (data) {\n  console.log('got a message from peer3: ' + data)\n})\n```\n\n#### Peer 3\n\n```js\n// These are peer3's connections to peer1 and peer2\nvar peer1 = new SimplePeer()\nvar peer2 = new SimplePeer()\n\npeer1.on('signal', function (data) {\n  // send this signaling data to peer1 somehow\n})\n\npeer1.on('connect', function () {\n  peer1.send('hi peer1, this is peer3')\n})\n\npeer1.on('data', function (data) {\n  console.log('got a message from peer1: ' + data)\n})\n\npeer2.on('signal', function (data) {\n  // send this signaling data to peer2 somehow\n})\n\npeer2.on('connect', function () {\n  peer2.send('hi peer2, this is peer3')\n})\n\npeer2.on('data', function (data) {\n  console.log('got a message from peer2: ' + data)\n})\n```\n\n## connection does not work on some networks?\n\nIf a direct connection fails, in particular, because of NAT traversal and/or firewalls,\nWebRTC ICE uses an intermediary (relay) TURN server. In other words, ICE will first use\nSTUN with UDP to directly connect peers and, if that fails, will fall back to a TURN relay\nserver.\n\nIn order to use a TURN server, you must specify the `config` option to the `SimplePeer`\nconstructor. See the API docs above.\n\n[![js-standard-style](https://cdn.rawgit.com/feross/standard/master/badge.svg)](https://github.com/feross/standard)\n\n## license\n\nMIT. Copyright (c) [Feross Aboukhadijeh](http://feross.org).\n",
  "readmeFilename": "README.md",
  "_id": "simple-peer@6.0.1",
  "_from": "simple-peer@^6.0.0"
}
